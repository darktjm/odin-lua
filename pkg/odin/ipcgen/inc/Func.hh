/* ig-gen.c */
extern void Gen_InStub(tp_FilDsc, tp_Nod);
extern void Gen_OutStub(tp_FilDsc, tp_Nod);
extern void Write_InMsg(tp_FilDsc, tp_Nod);
extern void Write_SplitInMsg(tp_FilDsc, tp_Nod);
extern void Write_OutMsg(tp_FilDsc, tp_Nod, int, boolean);
extern void Get_MsgNod(tp_Nod *, boolean *, tp_Nod);
extern void Write_ServerIfDef(tp_FilDsc, boolean);
extern void Write_Args(tp_FilDsc, tp_Nod);
extern void Write_NodSym(tp_FilDsc, tp_Nod);
/* ig-main.c */
extern int main(void);
/* ig-yylex.c */
extern int Init_Lex(void);
extern int YY_Lex(void);
extern boolean YY_IsWordChr(char);
extern void EndLex(void);
extern void ParseError(tp_Str);
/* ../if-err.c */
extern void Init_Err(void);
extern void Set_IPC_Err(boolean);
extern void Set_ErrFile(tp_FileName, boolean, tp_FilDsc);
extern void Save_ErrFile(tp_FileName *, boolean *, tp_FilDsc *);
extern boolean IsErr(void);
extern void Reset_Err(void);
extern void Increment_Errors(void);
extern int Num_Errors(void);
extern void SysCallError(tp_FilDsc, char *);
extern void FatalError(char *, char *, int);
extern void SystemError(char *, ...);
extern void Local_ErrMessage(tp_Str);
extern void fatal_err(char *);
/* ../if-file.c */
extern void Set_ModeMask(tp_FileName);
extern void MakePlnFile(boolean *, tp_FileName);
extern void MakeDirFile(boolean *, tp_FileName);
extern void GetWorkingDir(boolean *, tp_Str);
extern void ChangeDir(boolean *, tp_FileName);
extern boolean IsExecutable(tp_FileName);
extern void MakeExecutable(tp_FileName);
extern void MakeReadOnly(boolean *, tp_FileName);
extern void SymLink(boolean *, tp_FileName, tp_FileName);
extern void FileName_SymLinkFileName(tp_FileName, tp_FileName);
extern boolean IsDirectory_FileName(tp_FileName);
extern boolean Exists(tp_FileName);
extern boolean Empty(tp_FileName);
extern void FileSize(boolean *, int *, tp_FileName);
extern void Remove(tp_FileName);
extern void RemoveDir(tp_FileName);
extern void Rename(boolean *, tp_FileName, tp_FileName);
/* ../if-io.c */
extern void Init_IO(void);
extern boolean GetIsTTY(void);
extern tp_FilDsc FileName_CFilDsc(tp_FileName);
extern tp_FilDsc FileName_FilDsc(tp_FileName, char *, boolean);
extern tp_FilDsc FileName_WFilDsc(tp_FileName, boolean);
extern tp_FilDsc FileName_WBFilDsc(tp_FileName, boolean);
extern tp_FilDsc FileName_AFilDsc(tp_FileName, boolean);
extern tp_FilDsc FileName_RFilDsc(tp_FileName, boolean);
extern tp_FilDsc FileName_RWFilDsc(tp_FileName, boolean);
extern tp_FilDsc FileName_RWBFilDsc(tp_FileName, boolean);
extern void Flush(tp_FilDsc);
extern void Rewind(tp_FilDsc);
extern void Unwind(tp_FilDsc);
extern void Close(tp_FilDsc);
extern boolean EndOfFile(tp_FilDsc);
extern void Write(tp_FilDsc, tp_Str);
extern void Writech(tp_FilDsc, char);
extern void WriteInt(tp_FilDsc, int);
extern void Writeln(tp_FilDsc, const char *);
extern void WriteLine(tp_FilDsc, tp_Str);
extern int Readch(tp_FilDsc);
extern tp_Str Readln(tp_Str, tp_FilDsc);
extern tp_Str ReadLine(tp_Str, tp_FilDsc);
extern boolean Equal(tp_FilDsc, tp_FilDsc);
extern void FileCopy(tp_FilDsc, tp_FilDsc);
/* ../if-nod.c */
extern tp_Nod New_Nod(void);
extern void Ret_Nod(tp_Nod);
extern tp_NodTyp Nod_NodTyp(tp_Nod);
extern void Set_Nod_NodTyp(tp_Nod, tp_NodTyp);
extern tp_Nod Nod_FirstSon(tp_Nod);
extern void Set_Nod_FirstSon(tp_Nod, tp_Nod);
extern tp_Nod Nod_Brother(tp_Nod);
extern void Set_Nod_Brother(tp_Nod, tp_Nod);
extern int Nod_NumSons(tp_Nod);
extern tp_Nod Nod_Son(int, tp_Nod);
extern tp_Sym Nod_Sym(tp_Nod);
extern void Set_Nod_Sym(tp_Nod, tp_Sym);
extern void Push_SymStack(tp_Sym);
extern void Init_ConstructTree(void);
extern tp_Nod End_ConstructTree(void);
extern void Action(int, int);
/* ../if-symbol.c */
extern tp_Str GetEnv(tp_Str);
extern tp_Str Malloc_Str(const char *);
extern boolean Is_EmptyStr(tp_Str);
extern int Str_PosInt(tp_Str);
extern tp_Str Tail(tp_Str);
extern void StrShift(tp_Str, int);
extern tp_Sym Str_Sym(tp_Str);
extern tp_Str Sym_Str(tp_Sym);
extern int Sym_Att(tp_Sym);
extern void Set_Sym_Att(tp_Sym, int);
extern void Write_Syms(tp_FilDsc);
/* ipcgen.ygi */
extern tp_Nod YY_Parse(void);
extern void yyerror(char *);
extern int yylex(void);
extern int yyparse(void);
